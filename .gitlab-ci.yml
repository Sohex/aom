# Build scripts based from @1480c1
# https://gitlab.com/AOMediaCodec/aom-testing/-/blob/master/.gitlab-ci.yml 

image: docker:latest
services:
  - docker:dind

stages:
  - build
  - test
  - deploy
  - validation

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: /certs

before_script:
  - |
    printf '%s\n' "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
      TIMESTAMP="$(date +%Y%m%d)"
      LATEST="latest"
    else
      if [ "$CI_COMMIT_TAG" != "" ]; then
        TIMESTAMP="${CI_COMMIT_TAG}-$(date +%Y%m%d)"
        LATEST="${CI_COMMIT_TAG}-latest"
      else
        TIMESTAMP="${CI_COMMIT_BRANCH}-$(date +%Y%m%d)"
        LATEST="${CI_COMMIT_BRANCH}-latest"
      fi
    fi

.builder:
  except:
    changes:
      - "README.md"
  script: &builder |
    # image name, space removed and lowercased
    DOCKER_CONTAINER_NAME=$(printf %s $CI_JOB_NAME | tr '[:upper:]' '[:lower:]')
    # "Release" name, aka tagged name by date
    CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE/$DOCKER_CONTAINER_NAME:$TIMESTAMP}

    # Actual build step
    docker build --compress --pull \
      -f Dockerfile.$DOCKER_CONTAINER_NAME \
      -t "$CI_REGISTRY_IMAGE/$DOCKER_CONTAINER_NAME:$LATEST" \
      ${CONTAINER_RELEASE_IMAGE:+-t $CONTAINER_RELEASE_IMAGE} \
      "$PWD"

    docker push "$CI_REGISTRY_IMAGE/$DOCKER_CONTAINER_NAME:$LATEST"
    ${CONTAINER_RELEASE_IMAGE:+docker push $CONTAINER_RELEASE_IMAGE}

.tester:
  script: &tester |
    if [ -z ${DEPENDENCIES+x} ]; then 
      DEPENDENCIES="curl ffmpeg"
    else 
      DEPENDENCIES="${DEPENDENCIES} curl ffmpeg"
    fi

    apk add --no-progress --no-cache $DEPENDENCIES

    mkdir -p videos

    for url in raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master randomderp.com; do curl -LO https://$url/video.tar.gz && break; done 
    tar xf video.tar.gz --directory videos

    CONTAINER="${CI_REGISTRY_IMAGE}/${DOCKER_CONTAINER_NAME}:${LATEST}"

    if [ "$DOCKER_CONTAINER_NAME" == "aomenc" ] || [ "$DOCKER_CONTAINER_NAME" == "svt-av1" ] || [ "$DOCKER_CONTAINER_NAME" == "rav1e" ]; then
      git clone https://github.com/videolan/dav1d.git
      mkdir -p dav1d/build && cd dav1d/build
      meson .. && ninja
      cd "$CI_PROJECT_DIR"
    fi

.deployer:
  except:
    changes:
      - "README.md"
  script: &deployer |
    if [ "$CI_COMMIT_BRANCH" != "$CI_DEFAULT_BRANCH" ]; then
      # Build final image using branch images instead of main latest
      sed -i 's/aomenc:latest/aomenc:'"${LATEST}"'/g' Dockerfile
      sed -i 's/svt-av1:latest/svt-av1:'"${LATEST}"'/g' Dockerfile
      sed -i 's/rav1e:latest/rav1e:'"${LATEST}"'/g' Dockerfile
      sed -i 's/x265:latest/x265:'"${LATEST}"'/g' Dockerfile
      sed -i 's/svt-hevc:latest/svt-hevc:'"${LATEST}"'/g' Dockerfile
      sed -i 's/x264:latest/x264:'"${LATEST}"'/g' Dockerfile
      sed -i 's/vpxenc:latest/vpxenc:'"${LATEST}"'/g' Dockerfile
    fi

    CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}

    # Actual build step
    docker build --compress --pull \
      -f Dockerfile \
      -t "$CI_REGISTRY_IMAGE:$LATEST" \
      ${CONTAINER_RELEASE_IMAGE:+-t $CONTAINER_RELEASE_IMAGE} \
      "$PWD"

    docker push "$CI_REGISTRY_IMAGE:$LATEST"
    ${CONTAINER_RELEASE_IMAGE:+docker push $CONTAINER_RELEASE_IMAGE}

# Build
aomenc:
  stage: build
  extends: .builder

svt-av1:
  stage: build
  extends: .builder

rav1e:
  stage: build
  extends: .builder

x265:
  stage: build
  extends: .builder

svt-hevc:
  stage: build
  extends: .builder

x264:
  stage: build
  extends: .builder

vpxenc:
  stage: build
  extends: .builder

# Testing
tester-aomenc:
  stage: test
  needs: ["aomenc"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "aomenc"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - docker run -i "$CONTAINER" --rt --cpu-used=9 --ivf /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
    - dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

tester-svt-av1:
  stage: test
  needs: ["svt-av1"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "svt-av1"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - docker run -i "$CONTAINER" --preset 8 -i /dev/stdin -b /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
    - dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

tester-rav1e:
  stage: test
  needs: ["rav1e"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "rav1e"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - docker run -v $(pwd)/videos:/videos "$CONTAINER" --speed 10 --tiles 2 /videos/akiyo_cif.y4m -o /videos/akiyo_cif.ivf
    - dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

tester-x265:
  stage: test
  needs: ["x265"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "x265"
  script:
    - *tester
    - docker run -i "$CONTAINER" --y4m --preset 0 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.h265
    - ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.h265 -f null -

tester-svt-hevc:
  stage: test
  needs: ["svt-hevc"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "svt-hevc"
  script:
    - *tester
    - docker run -v $(pwd)/videos:/videos "$CONTAINER" -i /videos/akiyo_cif.y4m -b /videos/akiyo_cif.bin
    - ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.bin -f null -

tester-x264:
  stage: test
  needs: ["x264"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "x264"
  script:
    - *tester
    - docker run -i "$CONTAINER" --demuxer y4m --muxer mkv --preset 0 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.mkv
    - ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.mkv -f null -

tester-vpxenc:
  stage: test
  needs: ["vpxenc"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "vpxenc"
  script:
    - *tester
    - docker run -i "$CONTAINER" --codec=vp9 --ivf --cpu-used=0 --passes=1 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
    - ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.ivf -f null -

# Deploy
deploy:
  stage: deploy
  extends: .deployer

validator-aomenc:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "aomenc"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -i "$CONTAINER_RELEASE_IMAGE" aomenc --rt --cpu-used=9 --ivf /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
      dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

validator-svt-av1:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "svt-av1"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -i "$CONTAINER_RELEASE_IMAGE" SvtAv1EncApp --preset 8 -i /dev/stdin -b /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
      dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

validator-rav1e:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "rav1e"
    DEPENDENCIES: "git meson gcc g++ nasm samurai"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -v $(pwd)/videos:/videos "$CONTAINER_RELEASE_IMAGE" rav1e --speed 10 --tiles 2 /videos/akiyo_cif.y4m -o /videos/akiyo_cif.ivf
      dav1d/build/tools/dav1d -i videos/akiyo_cif.ivf -o videos/test.yuv

validator-x265:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "x265"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -i "$CONTAINER_RELEASE_IMAGE" x265 --y4m --preset 0 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.h265
      ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.h265 -f null -

validator-svt-hevc:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "svt-hevc"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -v $(pwd)/videos:/videos "$CONTAINER_RELEASE_IMAGE" SvtHevcEncApp -i /videos/akiyo_cif.y4m -b /videos/akiyo_cif.bin
      ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.bin -f null -

validator-x264:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "x264"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -i "$CONTAINER_RELEASE_IMAGE" x264 --demuxer y4m --muxer mkv --preset 0 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.mkv
      ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.mkv -f null -

validator-vpxenc:
  stage: validation
  needs: ["deploy"]
  except:
    changes:
      - "README.md"
  variables:
    DOCKER_CONTAINER_NAME: "vpxenc"
  script:
    - *tester
    - |
      CONTAINER_RELEASE_IMAGE=${CONTAINER_RELEASE_IMAGE-$CI_REGISTRY_IMAGE:$TIMESTAMP}
      docker run -i "$CONTAINER_RELEASE_IMAGE" vpxenc --codec=vp9 --ivf --cpu-used=0 --passes=1 /dev/stdin -o /dev/stdout < videos/akiyo_cif.y4m > videos/akiyo_cif.ivf
      ffmpeg -hide_banner -loglevel error -i videos/akiyo_cif.ivf -f null -
